const { ObjectId } = require("mongodb");

class ReturnedService {
    constructor(client) {
        this.collection = client.db().collection("DATRASACH"); // Collection ch·ª©a s√°ch ƒë√£ tr·∫£
    }

    async create(payload) {
        const doc = {
            madocgia: payload.madocgia,
            masach: payload.masach,
            ngaytrasach: new Date() // Ghi nh·∫≠n th·ªùi gian tr·∫£ s√°ch
        };
        const result = await this.collection.insertOne(doc);
        return result;
    }

    // üìå T√¨m s√°ch ƒë√£ tr·∫£ theo m√£ ƒë·ªôc gi·∫£
    async findByReaderId(madocgia) {
        try {
            return await this.collection.aggregate([
                {
                    $match: { madocgia: madocgia } // L·ªçc theo m√£ ƒë·ªôc gi·∫£
                },
                {
                    $lookup: {
                        from: "SACH", // Collection ch·ª©a th√¥ng tin s√°ch
                        localField: "masach",
                        foreignField: "masach",
                        as: "bookInfo"
                    }
                },
                {
                    $unwind: {
                        path: "$bookInfo",
                        preserveNullAndEmptyArrays: true // N·∫øu kh√¥ng c√≥ th√¥ng tin s√°ch th√¨ kh√¥ng b·ªã l·ªói
                    }
                },
                {
                    $project: {
                        _id: 1,
                        madocgia: 1,
                        masach: 1,
                        ngaytrasach: 1,
                        tenSach: "$bookInfo.tensach" // L·∫•y t√™n s√°ch
                    }
                }
            ]).toArray();
        } catch (error) {
            console.error("‚ùå L·ªói khi t√¨m s√°ch ƒë√£ tr·∫£:", error);
            return [];
        }
    }
    

    async getAllBorrowsGroupedByReader() {
        try {
            return await this.collection.aggregate([
                {
                    $group: {
                        _id: "$madocgia",
                        totalReturned: { $sum: 1 }, // T·ªïng s·ªë s√°ch ƒë√£ tr·∫£
                        books: {
                            $push: {
                                masach: "$masach",
                                ngaytrasach: "$ngaytrasach"
                            }
                        }
                    }
                },
                {
                    $lookup: {
                        from: "DOCGIA", // B·∫£ng ƒë·ªôc gi·∫£
                        localField: "_id",
                        foreignField: "madocgia",
                        as: "readerInfo"
                    }
                },
                {
                    $unwind: "$readerInfo"
                },
                {
                    $project: {
                        madocgia: "$_id",
                        hoten: "$readerInfo.hoten",
                        totalReturned: 1,
                        books: 1
                    }
                }
            ]).toArray();
        } catch (error) {
            console.error("‚ùå L·ªói khi nh√≥m s√°ch theo ƒë·ªôc gi·∫£:", error);
            return [];
        }
    }
    
}

module.exports = ReturnedService;
