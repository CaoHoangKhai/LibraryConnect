const ApiError = require("../api-error");
const ReturnedService = require("../services/returned.service");
const BorrowService = require("../services/borrow.service");
const MongoDB = require("../utils/mongodb.util");

exports.create = async (req, res, next) => {
    try {
        const returnedService = new ReturnedService(MongoDB.client);
        const borrowService = new BorrowService(MongoDB.client);
        const booksCollection = MongoDB.client.db().collection("SACH"); // Collection ch·ª©a s√°ch

        // üìå Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
        if (!req.body.madocgia || !req.body.masach) {
            return next(new ApiError(400, "madocgia v√† masach l√† b·∫Øt bu·ªôc"));
        }

        // üîç Ki·ªÉm tra xem s√°ch c√≥ ƒëang ƒë∆∞·ª£c m∆∞·ª£n kh√¥ng
        const borrowRecord = await borrowService.findByUserAndBook(req.body.madocgia, req.body.masach);
        if (!borrowRecord) {
            return next(new ApiError(404, "S√°ch n√†y kh√¥ng t·ªìn t·∫°i trong danh s√°ch m∆∞·ª£n!"));
        }

        // ‚úÖ Ghi nh·∫≠n tr·∫£ s√°ch v√†o collection DATRASACH
        const result = await returnedService.create(req.body);

        // üîÑ X√≥a b·∫£n ghi trong danh s√°ch m∆∞·ª£n sau khi tr·∫£
        await borrowService.remove(req.body.madocgia, req.body.masach);

        // üîÑ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s√°ch trong SACH (+1)
        const updateResult = await booksCollection.updateOne(
            { masach: req.body.masach },
            { $inc: { soquyen: 1 } } // TƒÉng s·ªë l∆∞·ª£ng s√°ch l√™n 1
        );

        if (updateResult.modifiedCount === 0) {
            console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s√°ch ƒë·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng!");
        }

        res.status(201).json({
            message: "‚úÖ Tr·∫£ s√°ch th√†nh c√¥ng! S·ªë l∆∞·ª£ng s√°ch ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.",
            data: result
        });
    } catch (error) {
        console.error("‚ùå L·ªói khi tr·∫£ s√°ch:", error);
        next(new ApiError(500, "L·ªói m√°y ch·ªß khi x·ª≠ l√Ω y√™u c·∫ßu tr·∫£ s√°ch"));
    }
};
exports.findAll = async (req, res, next) => {
    try {
        const borrowService = new BorrowService(MongoDB.client);

        // üîç L·∫•y danh s√°ch t·∫•t c·∫£ s√°ch m∆∞·ª£n, nh√≥m theo m√£ ƒë·ªôc gi·∫£
        const borrowList = await borrowService.getAllBorrowsGroupedByReader();

        res.status(200).json(borrowList);
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y danh s√°ch m∆∞·ª£n s√°ch theo nh√≥m:", error);
        next(new ApiError(500, "L·ªói m√°y ch·ªß khi l·∫•y danh s√°ch m∆∞·ª£n s√°ch"));
    }
};
exports.findByReaderId = async (req, res, next) => {
    try {
        const returnedService = new ReturnedService(MongoDB.client);
        const { madocgia } = req.params;

        if (!madocgia) {
            return next(new ApiError(400, "madocgia l√† b·∫Øt bu·ªôc"));
        }

        const returnedBooks = await returnedService.findByReaderId(madocgia);
        
        if (!returnedBooks.length) {
            return next(new ApiError(404, "Kh√¥ng t√¨m th·∫•y s√°ch ƒë√£ tr·∫£ c·ªßa ƒë·ªôc gi·∫£ n√†y"));
        }

        res.status(200).json(returnedBooks);
    } catch (error) {
        console.error("‚ùå L·ªói khi t√¨m s√°ch ƒë√£ tr·∫£ theo madocgia:", error);
        next(new ApiError(500, "L·ªói m√°y ch·ªß khi t√¨m s√°ch ƒë√£ tr·∫£"));
    }
};
