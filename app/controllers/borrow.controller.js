const MongoDB = require("../utils/mongodb.util");
const ApiError = require("../api-error");
const BorrowService = require("../services/borrow.service");
const BookService = require("../services/book.service");
const PublisherService = require("../services/publisher.service");

exports.createBorrow = async (req, res, next) => {
    try {
        const borrowService = new BorrowService(MongoDB.client);
        const bookService = new BookService(MongoDB.client);

        if (!req.body.madocgia || !req.body.masach) {
            return res.status(400).json({ message: "Thi·∫øu th√¥ng tin ƒë·ªôc gi·∫£ ho·∫∑c s√°ch" });
        }

        // üîç Ki·ªÉm tra s·ªë s√°ch ƒë·ªôc gi·∫£ ƒë√£ m∆∞·ª£n
        const borrowedBooks = await borrowService.getBorrowsByReaderId(req.body.madocgia);
        if (borrowedBooks.length >= 3) {
            return res.status(400).json({ message: "B·∫°n ƒë√£ m∆∞·ª£n ƒë·ªß 3 cu·ªën, kh√¥ng th·ªÉ m∆∞·ª£n th√™m" });
        }

        // üîç T√¨m s√°ch theo `masach`
        const book = await bookService.getBookById(req.body.masach);
        if (!book) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s√°ch" });
        }

        // üìâ Ki·ªÉm tra s·ªë l∆∞·ª£ng s√°ch
        if (book.soquyen <= 0) {
            return res.status(400).json({ message: "S√°ch ƒë√£ h·∫øt, kh√¥ng th·ªÉ m∆∞·ª£n" });
        }

        // ‚úÖ T·∫°o b·∫£n ghi m∆∞·ª£n s√°ch
        const newBorrow = await borrowService.createBorrow(req.body);

        // üîÑ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s√°ch (gi·∫£m ƒëi 1)
        await bookService.updateBookQuantity(req.body.masach, -1);

        res.status(201).json({
            message: "M∆∞·ª£n s√°ch th√†nh c√¥ng",
            borrowId: newBorrow,
        });
    } catch (error) {
        console.error("‚ùå L·ªói khi m∆∞·ª£n s√°ch:", error);
        next(new ApiError(500, "L·ªói m√°y ch·ªß khi x·ª≠ l√Ω y√™u c·∫ßu"));
    }
};

exports.findAll = async (req, res, next) => {
    try {
        const borrowService = new BorrowService(MongoDB.client);
        const bookService = new BookService(MongoDB.client);
        const publisherService = new PublisherService(MongoDB.client);

        // üîç L·∫•y danh s√°ch t·∫•t c·∫£ l∆∞·ª£t m∆∞·ª£n
        const borrows = await borrowService.getAllBorrows();

        // üîÑ Nh√≥m s√°ch theo `madocgia`
        const borrowSummary = {};
        for (const borrow of borrows) {
            if (!borrowSummary[borrow.madocgia]) {
                borrowSummary[borrow.madocgia] = {
                    madocgia: borrow.madocgia,
                    totalBorrowed: 0, // T·ªïng s·ªë l∆∞·ª£t m∆∞·ª£n c·ªßa ƒë·ªôc gi·∫£
                    books: [], // Danh s√°ch s√°ch m√† ƒë·ªôc gi·∫£ ƒë√£ m∆∞·ª£n
                };
            }
            
            // L·∫•y th√¥ng tin s√°ch
            const book = await bookService.getBookById(borrow.masach);
            const publisher = book ? await publisherService.getPublisherById(book.manxb) : null;

            // ƒê·∫©y th√¥ng tin s√°ch v√†o danh s√°ch
            borrowSummary[borrow.madocgia].books.push({
                masach: borrow.masach,
                tensach: book ? book.tensach : "Kh√¥ng r√µ",
                dongia: book ? book.dongia : 0,
                namxuatban: book ? book.namxuatban : "Kh√¥ng r√µ",
                TenNXB: publisher ? publisher.TenNXB : "Kh√¥ng r√µ",
                tacgia: book ? book.tacgia : "Kh√¥ng r√µ",
            });

            // TƒÉng t·ªïng s·ªë l∆∞·ª£t m∆∞·ª£n
            borrowSummary[borrow.madocgia].totalBorrowed += 1;
        }

        // üìù Chuy·ªÉn object v·ªÅ d·∫°ng array
        res.status(200).json(Object.values(borrowSummary));
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y danh s√°ch m∆∞·ª£n s√°ch:", error);
        next(new ApiError(500, "L·ªói m√°y ch·ªß khi x·ª≠ l√Ω y√™u c·∫ßu"));
    }
};

exports.findByReaderId = async (req, res, next) => {
    try {
        console.log("üìù req.params:", req.params); // Ki·ªÉm tra gi√° tr·ªã nh·∫≠n ƒë∆∞·ª£c

        const borrowService = new BorrowService(MongoDB.client);
        const { madocgia } = req.params;

        if (!madocgia) {
            return res.status(400).json({ message: "Thi·∫øu m√£ ƒë·ªôc gi·∫£" });
        }

        const borrows = await borrowService.getBorrowsByReaderId(madocgia);
        res.status(200).json(borrows);
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y danh s√°ch m∆∞·ª£n s√°ch theo ƒë·ªôc gi·∫£:", error);
        next(new ApiError(500, "L·ªói m√°y ch·ªß khi x·ª≠ l√Ω y√™u c·∫ßu"));
    }
};

exports.findOverdueBooks = async (req, res, next) => {
    try {
        const borrowService = new BorrowService(MongoDB.client);
        const overdueBorrows = await borrowService.getOverdueBorrows();

        if (!overdueBorrows.length) {
            console.log("‚úÖ Kh√¥ng c√≥ s√°ch b·ªã m∆∞·ª£n tr·ªÖ.");
            return res.status(200).json({ message: "Kh√¥ng c√≥ s√°ch b·ªã m∆∞·ª£n tr·ªÖ" });
        }

        console.log("üìå S√°ch m∆∞·ª£n tr·ªÖ:", overdueBorrows);
        res.status(200).json(overdueBorrows);
    } catch (error) {
        console.error("‚ùå L·ªñI API:", error);
        res.status(500).json({ message: "L·ªói m√°y ch·ªß: " + error.message });
    }
};
